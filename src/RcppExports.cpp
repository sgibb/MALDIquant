// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// colMediansArma
arma::vec colMediansArma(arma::sp_mat& x, bool ignore_missing);
RcppExport SEXP _MALDIquant_colMediansArma(SEXP xSEXP, SEXP ignore_missingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type ignore_missing(ignore_missingSEXP);
    rcpp_result_gen = Rcpp::wrap(colMediansArma(x, ignore_missing));
    return rcpp_result_gen;
END_RCPP
}
// colMeansArma
arma::vec colMeansArma(arma::sp_mat& x, bool ignore_missing);
RcppExport SEXP _MALDIquant_colMeansArma(SEXP xSEXP, SEXP ignore_missingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type ignore_missing(ignore_missingSEXP);
    rcpp_result_gen = Rcpp::wrap(colMeansArma(x, ignore_missing));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP C_colMedians(SEXP, SEXP);
RcppExport SEXP C_dilation(SEXP, SEXP);
RcppExport SEXP C_erosion(SEXP, SEXP);
RcppExport SEXP C_localMaxima(SEXP, SEXP);
RcppExport SEXP C_lowerConvexHull(SEXP, SEXP);
RcppExport SEXP C_snip(SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_MALDIquant_colMediansArma", (DL_FUNC) &_MALDIquant_colMediansArma, 2},
    {"_MALDIquant_colMeansArma", (DL_FUNC) &_MALDIquant_colMeansArma, 2},
    {"C_colMedians",               (DL_FUNC) &C_colMedians,               2},
    {"C_dilation",                 (DL_FUNC) &C_dilation,                 2},
    {"C_erosion",                  (DL_FUNC) &C_erosion,                  2},
    {"C_localMaxima",              (DL_FUNC) &C_localMaxima,              2},
    {"C_lowerConvexHull",          (DL_FUNC) &C_lowerConvexHull,          2},
    {"C_snip",                     (DL_FUNC) &C_snip,                     3},
    {NULL, NULL, 0}
};

RcppExport void R_init_MALDIquant(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
